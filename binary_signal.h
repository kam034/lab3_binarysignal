#ifndef LAB3_BINARYSIGNAL_BINARY_SIGNAL_H
#define LAB3_BINARYSIGNAL_BINARY_SIGNAL_H

//1.Разработать класс "двоичный сигнал" в соответствии со следующим заданием:
//
//Состояние класса -
//
//Двоичный сигнал определяется последовательностью состояний
//сигнала (значение уровня и длительность типа char в условных единицах).
//Для описания состояния сигнала целесообразно использовать структуру.
//Память под массив структур выделяется статически, во время компиляции,
//и задается массивом фиксированного размера. Задаётся максимальная длительность сигнала.
//
//Протокол класса -
//Определяет возможности создания и инициализации экземпляров класса и правила их использования (методы класса).
//
//Предусмотреть следующие возможности:
//
//·  пустой конструктор для инициализации экземпляров и массивов экземпляров класса по умолчанию;
//·  создание экземпляров класса с инициализацией постоянным уровнем сигнала (уровень 0 или 1 на максимальную длительность);
//·  создание экземпляров класса с инициализацией сигналом как строки символов;
//·  ввод экземпляров класса из входного потока и вывод;
//·  инвертировать сигнал;
//·  дополнение сигнала другим сигналом;
//·  вставка в определённый момент времени (тип int) другого сигнала;
//·  копирование сигнала определённое число раз;
//·  удаление фрагмента сигнала в определенное время (тип int) определённой длительности.


//

#include <iostream>
#define K 123
//#include <cstdlib>

namespace BS {

    struct Status {
        int level;
        char duration;
    };

    class Binary_signal {
    private:
        static const int N = 10;
        Status a[N];
        int size;
    public:
        Binary_signal();
        Binary_signal(int l);
        Binary_signal(char const d[K]);

        Status get_status(int i) { return a[i]; }
        int get_size() { return size; }

    };
}

#endif //LAB3_BINARYSIGNAL_BINARY_SIGNAL_H
